# 2020-07-21
# Informational links
- https://www.cplusplus.com/info/description/
    - Good overview of language types, nothing new for me =/
- https://www.cplusplus.com/info/history/
    - Skimmed, nice history on C++
- https://www.cplusplus.com/info/faq/
    - Good clarifications on a few things
    - Including that ANSI-C++ is a standard, whereas iirc there's inconsistencies between compilers so we have to wrangle with defined vs undefined behavior

# Tutorial
## https://www.cplusplus.com/doc/tutorial/introduction/

Assembly...

How compilation works...

Console programs...

Due to being on Linux, we'll use `g++`
Clang is good for OS X

## https://www.cplusplus.com/doc/tutorial/program_structure/
- Code comments
- `#` is a directive symbol
    - `#include` means to insert the code into this file (kind of like PHP `include`)
        - As opposed to Python and Node.js `import`/`require` which load that part of the program as a module which can be referenced but isn't in the same file per-se
    - `#include <iostream>` means include the *header* for iostream (still need to fully understand what a header is...)
- `int main ()` - Declare a function which returns an `int`, is called `main`, and takes 0 parameters
    - `main` is special as it's what's called when the program is run
    - Not mentioned: `int` is going to be the exit code of the program
        - If not specified, then the function will return `0` by default (success exit code)
- `std::cout` - `std` is standard, `cout` is character output
- `<<` is insertion operator so we insert the string to `std::cout`

- Multiple `std::cout` calls continues outputting

### Comments
- `//` is single line ocmment
- `/* */` is multiline comment

### Namespaces
- In some other code, might have seen no `std::` used
    - This is due to using the `std` namespace by default (see below)
    - However, `std::cout` and `cout` refer to the same object
        - `cout` is called unqualified
        - `std::out` is called qualified, with the namespace `std`
- `cout` is part of standard C++ library, declared within the `std` namespace
    - To refer to items within `std` namespace, program shally qualify usage of elements of library (e.g. `std::`) or "introduce visibility of its components"
        - Visibility is done most often with `using` delcaration
        - e.g. `using namespace std;`

Future code examples will use similar `using` syntax

Both are valid but only using non-`using` syntax is good to avoid name collisions (seems backwards reinforcement...)

For personal reference, here's the error when we try `cout` without `std::` and no `using namespace`:

```
main.cpp: In function ‘int main()’:
main.cpp:7:3: error: ‘cout’ was not declared in this scope
   cout << "Hello World!\n";
   ^~~~
main.cpp:7:3: note: suggested alternative:
In file included from main.cpp:2:0:
/usr/include/c++/7/iostream:61:18: note:   ‘std::cout’
   extern ostream cout;  /// Linked to standard output
```

Oooh, really cool insight that C++ std lib are just a file locally

```
less /usr/include/c++/7/iostream
```
